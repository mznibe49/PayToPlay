# running springboot with local psql
spring.datasource.url= jdbc:postgresql://localhost:5432/mainDataBase

# running springboot with docker image -> p2p-docker-psql is the container name
# mainDataBase is the name of our data base
# spring.datasource.url= jdbc:postgresql://p2p-docker-psql:5432/mainDataBase
spring.datasource.username= postgres
spring.datasource.password= admin

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
# For production, this property should be validate (why ?)
spring.jpa.hibernate.ddl-auto= update

# App Properties
auth.app.jwtSecret= mainBaseSecretKey
auth.app.jwtExpirationMs= 86400000

# mail service
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=beWings22@gmail.com
spring.mail.password=honeyPie2.
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# front-end url
# remember that in future while we will have different environment for example dev & prod
# we will have to split our file properties to two files =>
# application-dev.properties and application-prod.properties
# when spring boot start, it automatically use application.properties
# to specify the correct file to run in each environment (even in the docker file) we have mention it in the run command
# ===> java -jar fileJarName-SNAPSHOT.jar --spring.profiles.active = prod (will launch spring boot with application-prod.properties)
# ===> java -jar fileJarName-SNAPSHOT.jar --spring.profiles.active = dev  (will launch spring boot with application-dev.properties)
spring.application.front.url=http://localhost:8081

